#!/bin/bash

# Tool to convert a ContainerFile to a VM ImageFile

trap atexit_reverse_handler EXIT

DISK_SIZE="2G"
SSH_KEY=""
DEBUG=0
readonly DEBUG_L1=1
readonly DEBUG_L2=10

ATEXIT=()

atexit_reverse_handler() {
  local EXPR
  for (( idx=${#ATEXIT[@]}-1 ; idx>=0 ; idx-- )) ; do
    EXPR="${ATEXIT[idx]}"
    [[ "$DEBUG" -ge $DEBUG_L1 ]] && echo "cleanup: $EXPR"
    eval "$EXPR" || true
  done
}

atexit () {
  local EXPR
  for EXPR in "$@"; do
    ATEXIT+=("$EXPR")
  done
}

usage() {
    echo "Usage: $(basename "$0") [-h] [-d] [-k KEYFILE] CONTAINER IMAGEFILE"
    echo "Convert a ContainerFile to a ImageFile"
    echo "Options:"
    echo -e "\t-h\t\tprint this help"
    echo -e "\t-k KEYFILE\tadd ssh key to the root account"
    echo -e "\t-s SIZE\t disk size (default 2G)"
    echo -e "\t-d\t\tturn on debug (use it multiple times to increse debug info)"
    echo -e "\t-q\t\tgenerate a qcow2 image"
    echo "Example:"
    echo -e "\tCreate a 10G ubuntu image with your ssh key on it"
    echo -e "\t# $(basename "$0") -s 10G -k ~/.ssh/id_rsa.pub localhost/ubuntu-base-vm /opt/images/ubuntu-base.img"
    echo -e "\tCreate an ubuntu image with qcow2 format"
    echo -e "\t# $(basename "$0") -q localhost/ubuntu-base-vm /opt/images/ubuntu-base.qcow2"
}

fatal(){
    1>&2 echo "$1"
    exit 1
}

setup_tools() {
    BUILDAH=$(which buildah)
    LOSETUP=$(which losetup)
    SGDISK=$(which sgdisk)
    TRUNCATE=$(which truncate)
    SYSLINUX=$(which extlinux)
    LSBLK=$(which lsblk)
    PARTPROBE=$(which partprobe)
    EXT4=$(which mkfs.ext4)
    QEMUIMG=$(which qemu-img)

    [[ -z "$BUILDAH" ]] && fatal "buildah binary not found"
    [[ -z "$LOSETUP" ]] && fatal "losetup not found"
    [[ -z "$SGDISK" ]] && fatal "sgdisk not found"
    [[ -z "$TRUNCATE" ]] && fatal "truncate not found"
    [[ -z "$SYSLINUX" ]] && fatal "syslinux not installed"
    [[ -z "$LSBLK" ]] && fatal "lsblk not found"
    [[ -z "$PARTPROBE" ]] && fatal "partprobe not found"
    [[ -z "$EXT4" ]] && fatal "mkfs.ext4 not found"
    [[ -z "$QEMUIMG" ]] && fatal "qemu-img not found"
}


find_kernel() {
    local -r fs="$1"
    [[ -e "$fs/vmlinuz" ]] && { echo "/vmlinuz"; return; }
    [[ -e "$fs/boot/vmlinuz" ]] && { echo "/boot/vmlinuz"; return; }
    [[ -e "$fs/boot/vmlinuz-linux" ]] && { echo "/boot/vmlinuz-linux"; return; }

}

find_initrd() {
    local -r fs="$1"
    [[ -e "$fs/initrd.img" ]] && { echo "/initrd.img"; return; }
    [[ -e "$fs/boot/initrd.img" ]] && { echo "/boot/initrd.img"; return; }
    [[ -e "$fs/boot/initramfs-linux-fallback.img" ]]  && { echo "/boot/initramfs-linux-fallback.img"; return; }

}

deploy_syslinux_cfg() {
    local -r dest="$1"
    local -r loopdev="$2"

    local -r syslinux_cfg="DEFAULT linux\n\tSAY booting...\n\tLABEL linux\n\t\tKERNEL %s\n\t\tAPPEND rw root=UUID=%s initrd=%s\n"

    local -r kernel_path=$(find_kernel "$dest")
    local -r initrd_path=$(find_initrd "$dest")

    local -r uuid=$($LSBLK -nio UUID "$loopdev")
    mkdir -p "$dest/boot/syslinux"
    # shellcheck disable=SC2059
    printf "$syslinux_cfg" "$kernel_path" "$uuid" "$initrd_path" > "$dest/boot/syslinux/syslinux.cfg"
    [[ "$DEBUG" -ge $DEBUG_L1 ]] && echo "install syslinux into the image file..."
    $SYSLINUX -i "${dest}/boot/syslinux/" 2> /dev/null

}

wait_for_loopdev() {
    local counter=0
    while [[ $counter -lt 5 ]]; do
        ((counter++))
        if [[ -e "$1" ]]; then
            return 0
        fi

        sleep 1
    done
    return 1
}

init_img() {
    local -r img="$1"
    local output="/dev/null"
    local loopdev

    if [[ "$DEBUG" -ge $DEBUG_L2 ]]; then
        output="/proc/$$/fd/2"
    fi

    [[ "$DEBUG" -ge $DEBUG_L1 ]] && echo "Creating image file..."
    $TRUNCATE -s "$DISK_SIZE" "$img"
    [[ "$DEBUG" -ge $DEBUG_L1 ]] && echo "partition the image file..."

    [[ "$DEBUG" -ge $DEBUG_L2 ]] && echo -e "\n---- sgdisk output -----"
    $SGDISK --clear \
        --attributes=1:set:2 \
        --new 1::-0 --typecode=1:8300 \
        "$img" > "$output" 2>&1
    [[ "$DEBUG" -ge $DEBUG_L2 ]] && echo "------------------------"
    [[ "$DEBUG" -ge $DEBUG_L1 ]] && echo "running partprobe..."
    $PARTPROBE "$img"
    loopdev=$($LOSETUP --find --partscan --show "$img")
    atexit "losetup -d $loopdev"
    wait_for_loopdev "${loopdev}p1"
    [[ "$DEBUG" -ge $DEBUG_L1 ]] && echo "format the partition..."
    [[ "$DEBUG" -ge $DEBUG_L2 ]] && echo -e "\n---- mkfs.ext4 output -----"
    $EXT4 -F "${loopdev}p1" > "$output" 2>&1
    [[ "$DEBUG" -ge $DEBUG_L2 ]] && echo "------------------------"
}

setup_img() {
    local -r img="$1"
    local -r ctr="$2"
    local bctrid
    local bmntid
    local imgmnt
    local loopdev

    bctrid=$($BUILDAH from "$ctr")  
    [[ "$DEBUG" -ge $DEBUG_L1 ]] && echo "getting the container - id: $bctrid"
    bmntid=$($BUILDAH mount "$bctrid")
    [[ "$DEBUG" -ge $DEBUG_L1 ]] && echo "mount the container - id: $bmntid"
    imgmnt=$(mktemp -d)
    atexit "rm -r $imgmnt"
    loopdev=$($LOSETUP --find --partscan --show "$img")
    atexit "losetup -d $loopdev"
    wait_for_loopdev "${loopdev}p1"
    mount "${loopdev}p1" "$imgmnt"
    [[ "$DEBUG" -ge $DEBUG_L1 ]] && echo "mount the image - dir: $imgmnt"
    atexit "umount $imgmnt"
    [[ "$DEBUG" -ge $DEBUG_L1 ]] && echo "coping the container into the image file..."
    cp -a "$bmntid"/* "$imgmnt"
    $BUILDAH unmount "$bctrid" > /dev/null
    $BUILDAH rm "$bctrid" > /dev/null
    if [[ -n "$SSH_KEY" ]]; then
        if ! grep -qs "$SSH_KEY" "$imgmnt/root/.ssh/authorized_keys"; then
            [[ "$DEBUG" -ge $DEBUG_L1 ]] && echo "Importing ssh key file ..."
            mkdir -p "$imgmnt/root/.ssh"
            chmod 0700 "$imgmnt/root/.ssh"
            echo "$SSH_KEY" >> "$imgmnt/root/.ssh/authorized_keys"
            chmod 0600 "$imgmnt/root/.ssh/authorized_keys"
        fi
    fi
    deploy_syslinux_cfg "${imgmnt}" "${loopdev}p1"
    [[ "$DEBUG" -ge $DEBUG_L1 ]] && echo "writing the mbr into the image file..."
    dd bs=440 count=1 conv=notrunc if=/usr/lib/syslinux/bios/gptmbr.bin of="$img" 2> /dev/null
}

qcow2_img() {   
    local src="$1"
    local temp
    temp=$(mktemp)
    [[ "$DEBUG" -ge $DEBUG_L1 ]] && echo "generating qcow2 image ..."
    $QEMUIMG convert -c -f raw -O qcow2 "$src" "$temp"
    rm "$src" 
    mv "$temp" "$src"
}

main() {
    readonly optstring=":hdDqk:s:"
    local qcow2_output=0
    while getopts $optstring arg; do

        case $arg in
            h)
                usage
                exit 0
                ;;
            d)
                DEBUG=$((DEBUG+5))
                ;;
            k)
                [[ -e "$OPTARG" ]] || { echo "key file not found: $OPTARG"; exit 1; }
                SSH_KEY=$(cat "$OPTARG")
                ;;
            s)
                DISK_SIZE="$OPTARG"
                ;;
            q)
                qcow2_output=1
                ;;
            ?)
                fatal "invalid option: -$OPTARG"
                ;;
        esac
    done

    shift $((OPTIND -1))

    if [ $# -ne 2 ]; then
        fatal "Expected 2 arguments, got $#, see usage with -h"
    fi

    local CONTAINER="$1"
    local IMG="$2"

    setup_tools

    init_img "$IMG"
    setup_img "$IMG" "$CONTAINER"
    if [[ $qcow2_output -ge 1 ]]; then
        qcow2_img "$IMG"
    fi
}

main "$@"
